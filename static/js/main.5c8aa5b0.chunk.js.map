{"version":3,"sources":["logo.svg","components/NavBar.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","AppBar","position","Toolbar","Typography","color","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cr_number","cr_type","request_type","description","reason","date_required","Date","toISOString","substring","priority","request_date","requester","signature","error_cr_number","error_cr_type","error_request_type","error_description","error_reason","error_date_required","error_priority","error_request_date","error_requester","error_signature","id","handleChange","bind","assertThisInitialized","submit","requestTypeValidation","descriptionValidation","reasonValidation","dateRequiredValidation","priorityValidation","requesterValidation","signatureValidation","validator","SimpleReactValidator","element","validators","date_format","message","rule","val","params","moment","isValid","boolean_true","event","_this2","target","value","type","checked","name","console","log","setState","props","defineProperty","classes","Container","style","marginTop","Grid","container","justify","variant","root","formTitle","action","direction","spacing","item","xs","InputLabel","htmlFor","required","formLabel","TextField","disabled","placeholder","onChange","margin","fullWidth","FormControl","RadioGroup","aria-label","sm","FormControlLabel","control","Radio","label","onBlur","error","FormHelperText","messages","multiline","rows","Select","displayEmpty","input","OutlinedInput","formSelect","MenuItem","FormGroup","Checkbox","labelPlacement","Button","onClick","initForm","_this3","getCRNumber","refreshValidation","toString","length","slice","_this4","Promise","resolve","_this5","allValid","isValidatorValid","clearInput","then","alert","forceUpdate","fieldValid","showMessageFor","Component","withStyles","theme","marginBottom","App","react","components_NavBar","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCmBzBC,EAdA,WACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAS,UACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,MAAM,WAAlB,+MC2CdC,cAiVF,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAjVJI,MAAQ,CAEJC,UAAY,GACZC,QAAU,GACVC,aAAe,GAEfC,YAAc,GACdC,OAAS,GAETC,eAAgB,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IACtDC,SAAW,GAEXC,cAAe,IAAIJ,MAAOC,cAAcC,UAAU,EAAG,IACrDG,UAAY,GACZC,WAAY,EAGZC,iBAAkB,EAClBC,eAAgB,EAChBC,oBAAqB,EAErBC,mBAAoB,EACpBC,cAAe,EAEfC,qBAAsB,EACtBC,gBAAiB,EAEjBC,oBAAqB,EACrBC,iBAAkB,EAClBC,iBAAkB,EAGlBC,GAAI,KAkTJ/B,EAAKgC,aAAehC,EAAKgC,aAAaC,KAAlBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IACpBA,EAAKmC,OAASnC,EAAKmC,OAAOF,KAAZhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAGdA,EAAKoC,sBAAwBpC,EAAKoC,sBAAsBH,KAA3BhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC7BA,EAAKqC,sBAAwBrC,EAAKqC,sBAAsBJ,KAA3BhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC7BA,EAAKsC,iBAAmBtC,EAAKsC,iBAAiBL,KAAtBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IACxBA,EAAKuC,uBAAyBvC,EAAKuC,uBAAuBN,KAA5BhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC9BA,EAAKwC,mBAAqBxC,EAAKwC,mBAAmBP,KAAxBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC1BA,EAAKyC,oBAAsBzC,EAAKyC,oBAAoBR,KAAzBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC3BA,EAAK0C,oBAAsB1C,EAAK0C,oBAAoBT,KAAzBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAC3BA,EAAK2C,UAAY,IAAIC,IAAqB,CACtCC,SAAS,EACTC,WAAY,CACRC,YAAa,CACTC,QAAS,iCACTC,KAAM,SAACC,EAAKC,EAAQR,GAChB,OAAOS,EAAOF,GAAKG,YAI3BC,aAAc,CACVN,QAAS,mDACTC,KAAM,SAACC,EAAKC,EAAQR,GAChB,OAAe,IAARO,OA1BdlD,4EA7SAuD,GAAO,IAAAC,EAAArD,KACVsD,EAASF,EAAME,OAEfC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAOJ,EAAOI,KACpBC,QAAQC,IAAIN,EAAOI,MACnBC,QAAQC,IAAIN,EAAOC,OAEP,cAATG,GACC1D,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7B7C,WAAcoC,EAAKjD,MAAMa,aAGjCjB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,OAAAhE,OAAAiE,EAAA,EAAAjE,CAAA,GACT4D,EAAOH,sCAIR,IACIS,EAAYhE,KAAK8D,MAAjBE,QACR,OACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAW,SAC9B/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACpBlF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAY6E,QAAQ,KAAKP,QAAS,CAACQ,KAAMR,EAAQS,YAAjD,wBAEJrF,EAAAC,EAAAC,cAAA,QAAMoF,OAAO,KACbtF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMC,WAAS,EAACM,UAAU,SAASC,QAAS,GACxCxF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAAjE,aACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIC,UAAQ,EACRxD,GAAG,YACH8B,KAAK,YACL2B,YAAY,WACZ9B,MAAOvD,KAAKI,MAAMC,UAClBiF,SAAUtF,KAAK6B,aACf0D,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACTP,UAAQ,KAKhB7F,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,UAAUC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAA/D,cACA9F,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAaD,WAAS,GAEtBpG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CACIC,aAAW,UACXjC,KAAK,UACLH,MAAOvD,KAAKI,MAAME,QAClBgF,SAAUtF,KAAK6B,cAEnBzC,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMC,WAAS,GACXjF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACe,GAAI,EAAGd,GAAI,IAClB1F,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CAAkBtC,MA5GvB,cA4G8CuC,QAAS1G,EAAAC,EAAAC,cAACyG,EAAA,EAAD,MAAWC,MAAM,iBAEvE5G,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACe,GAAI,EAAGd,GAAI,IAClB1F,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CAAkBtC,MA9G5B,SA8G8CuC,QAAS1G,EAAAC,EAAAC,cAACyG,EAAA,EAAD,MAAWC,MAAM,gBAQ1E5G,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,eAAeC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAApE,6BACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,eACH8B,KAAK,eACL2B,YAAY,GACZ9B,MAAOvD,KAAKI,MAAMG,aAClB+E,SAAUtF,KAAK6B,aACfoE,OAAQjG,KAAKiC,sBACbsD,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACTP,UAAQ,EACRiB,MAAOlG,KAAKI,MAAMgB,qBAErBpB,KAAKI,MAAMgB,mBACRhC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,eACA7C,KAAKI,MAAMG,aACX,WAAW,CACP6F,SAAU,CACNnB,SAAU,4CAKN,IAG5B7F,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,cAAcC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAAnE,0BACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,cACH8B,KAAK,cACL2B,YAAY,GACZ9B,MAAOvD,KAAKI,MAAMI,YAClB8E,SAAUtF,KAAK6B,aACfoE,OAAQjG,KAAKkC,sBACbqD,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACTa,WAAS,EACTC,KAAK,IACLrB,UAAQ,EACRiB,MAAOlG,KAAKI,MAAMiB,oBAEjBrB,KAAKI,MAAMiB,kBACRjC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,cACA7C,KAAKI,MAAMI,YACX,aAGY,IAGhCpB,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,SAASC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAA9D,qBACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,SACH8B,KAAK,SACL2B,YAAY,mCACZ9B,MAAOvD,KAAKI,MAAMK,OAClB6E,SAAUtF,KAAK6B,aACfoE,OAAQjG,KAAKmC,iBACboD,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACTP,UAAQ,EACRiB,MAAOlG,KAAKI,MAAMkB,eAEjBtB,KAAKI,MAAMkB,aACRlC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,SACA7C,KAAKI,MAAMK,OACX,aAGY,IAGhCrB,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,gBAAgBC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAArE,iBACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,gBACH8B,KAAK,gBACL2B,YAAY,WACZ9B,MAAOvD,KAAKI,MAAMM,cAClB4E,SAAUtF,KAAK6B,aACfoE,OAAQjG,KAAKoC,uBACbmD,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACThC,KAAK,OACLyB,UAAQ,EACRiB,MAAOlG,KAAKI,MAAMmB,sBAEjBvB,KAAKI,MAAMmB,oBACRnC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,gBACA7C,KAAKI,MAAMM,cACX,yBAGY,IAEhCtB,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,WAAWC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAAhE,YACA9F,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CACI7C,KAAK,WACL8C,cAAY,EACZjD,MAAOvD,KAAKI,MAAMU,SAClBwE,SAAUtF,KAAK6B,aACf4E,MAAOrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAeR,MAAOlG,KAAKI,MAAMoB,eAAgBwC,QAAS,CAACQ,KAAMR,EAAQ2C,cAChFnB,WAAS,EACTS,OAAQjG,KAAKqC,oBAEbjD,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUrD,MAAM,IACZnE,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUrD,MA5Pb,OA4PG,OACAnE,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUrD,MA5PV,UA4PA,UACAnE,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUrD,MA5PZ,QA4PE,QACAnE,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUrD,MA5PP,aA4PH,cAEHvD,KAAKI,MAAMoB,eACRpC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,WACA7C,KAAKI,MAAMU,SACX,aAGY,IAG5B1B,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,eAAehB,QAAS,CAACQ,KAAMR,EAAQkB,YAA3D,gBACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,eACH8B,KAAK,eACL2B,YAAY,WACZ9B,MAAOvD,KAAKI,MAAMW,aAClBuE,SAAUtF,KAAK6B,aACf0D,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACThC,KAAK,OACL4B,UAAQ,EACRH,UAAQ,KAIhB7F,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACT1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,UAAQ,EAACjB,QAAS,CAACQ,KAAMR,EAAQkB,YAAjE,kBACA9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACIvD,GAAG,YACH8B,KAAK,YACL2B,YAAY,GACZ9B,MAAOvD,KAAKI,MAAMY,UAClBsE,SAAUtF,KAAK6B,aACf0D,OAAO,SACPhB,QAAQ,WACRiB,WAAS,EACTS,OAAQjG,KAAKsC,oBACb2C,UAAQ,EACRiB,MAAOlG,KAAKI,MAAMsB,kBAEjB1B,KAAKI,MAAMsB,gBACRtC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,YACA7C,KAAKI,MAAMY,UACX,aAGY,IAGhC5B,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACC,IAAE,GACb1F,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMC,WAAS,EAACO,QAAS,GACrBxF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACe,GAAI,GAAId,GAAI,IACnB1F,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAaD,WAAW,GACpBpG,EAAAC,EAAAC,cAACuH,EAAA,EAAD,KACIzH,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACIC,QAAS1G,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAUlF,GAAG,YAAY8B,KAAK,cACvCsC,MAAM,gDACNe,eAAe,MACftD,QAASzD,KAAKI,MAAMa,UACpBqE,SAAUtF,KAAK6B,aACfoE,OAAQjG,KAAKuC,wBAIxBvC,KAAKI,MAAMuB,gBACRvC,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAgBD,OAAK,GAEjBlG,KAAKwC,UAAUK,QACX,YACA7C,KAAKI,MAAMa,UACX,eAAe,CACXmF,SAAU,CACNjD,aAAc,gEAKV,IAE5B/D,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMS,MAAI,EAACe,GAAI,EAAGd,GAAI,GAAIR,QAAQ,SAASD,WAAS,GAChDjF,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAQC,QAASjH,KAAKgC,OAASuC,QAAQ,YAAY5E,MAAM,WAAzD,6EAgDhBK,KAAKkH,8CAGE,IAAAC,EAAAnH,KAEJA,KAAKI,MAAMwB,IAAM,EAChB5B,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BzD,UAAW,KAAO8G,EAAKC,YAAYD,EAAK/G,MAAMwB,OAIlD5B,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BzD,UAAW,cAGnBL,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BxD,QAnZW,iBAqZfN,KAAKqH,wDAKGzF,GACR,OAAGA,EAAG0F,WAAWC,OAAS,GACd,SAAWvH,KAAKI,MAAMwB,GAAG0F,YAAYE,OAAO,GAEjD5F,EAAG0F,gDAGD,IAAAG,EAAAzH,KACT,OAAO,IAAI0H,QAAQ,SAAAC,GAAO,OAAIF,EAAK5D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAE3DxD,QApaW,cAqaXC,aAAe,GAEfC,YAAc,GACdC,OAAS,GAETC,eAAgB,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IACtDC,SAAW,GAEXC,cAAe,IAAIJ,MAAOC,cAAcC,UAAU,EAAG,IACrDG,UAAY,GACZC,WAAW,EAEXC,iBAAkB,EAClBC,eAAgB,EAChBC,oBAAqB,EAErBC,mBAAoB,EACpBC,cAAe,EAEfC,qBAAsB,EACtBC,gBAAiB,EAEjBC,oBAAqB,EACrBC,iBAAkB,EAClBC,iBAAkB,IAClBgG,iDAIJ3H,KAAKwC,UAAUK,QACX,eACA7C,KAAKI,MAAMG,aACX,YAGJP,KAAKwC,UAAUK,QACX,cACA7C,KAAKI,MAAMI,YACX,YAGJR,KAAKwC,UAAUK,QACX,SACA7C,KAAKI,MAAMK,OACX,YAGJT,KAAKwC,UAAUK,QACX,gBACA7C,KAAKI,MAAMM,cACX,wBAGJV,KAAKwC,UAAUK,QACX,WACA7C,KAAKI,MAAMU,SACX,YAGJd,KAAKwC,UAAUK,QACX,YACA7C,KAAKI,MAAMY,UACX,YAGJhB,KAAKwC,UAAUK,QACX,YACA7C,KAAKI,MAAMa,UACX,iDAIC,IAAA2G,EAAA5H,KAEDA,KAAKwC,UAAUqF,YAAc7H,KAAK8H,mBAClC9H,KAAK+H,aAAaC,KAAK,SAAAL,GACnB,OAAO,IAAID,QAAQ,SAAAC,GAAO,OAAIC,EAAK/D,SAAS,CAExCjC,GAAIgG,EAAKxH,MAAMwB,GAAK,GACjB+F,OACJK,KAAK,SAAAL,GAEJC,EAAKV,WACLe,MAAM,4CACNL,EAAKM,iBAIblI,KAAKiC,wBACLjC,KAAKkC,wBACLlC,KAAKmC,mBACLnC,KAAKoC,yBACLpC,KAAKqC,qBACLrC,KAAKsC,sBACLtC,KAAKuC,kEAKT,OAAOvC,KAAKwC,UAAU2F,WAAW,iBACzBnI,KAAKwC,UAAU2F,WAAW,gBAC1BnI,KAAKwC,UAAU2F,WAAW,WAC1BnI,KAAKwC,UAAU2F,WAAW,kBAC1BnI,KAAKwC,UAAU2F,WAAW,aAC1BnI,KAAKwC,UAAU2F,WAAW,cAC1BnI,KAAKwC,UAAU2F,WAAW,6DAIlCnI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,gBAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7B1C,oBAAoB,MAIxBpB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7B1C,oBAAoB,KAExBpB,KAAKwC,UAAU4F,eAAe,gBAC9BpI,KAAKkI,+DAKTlI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,eAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BzC,mBAAmB,MAIvBrB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BzC,mBAAmB,KAEvBrB,KAAKwC,UAAU4F,eAAe,eAC9BpI,KAAKkI,0DAKTlI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,UAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BxC,cAAc,MAIlBtB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BxC,cAAc,KAElBtB,KAAKwC,UAAU4F,eAAe,UAC9BpI,KAAKkI,gEAKTlI,KAAKqH,oBACLrH,KAAKwC,UAAU2F,WAAW,iBACtBnI,KAAKwC,UAAU2F,WAAW,iBAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BvC,qBAAqB,MAIzBvB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BvC,qBAAqB,KAEzBvB,KAAKwC,UAAU4F,eAAe,iBAC9BpI,KAAKkI,4DAKTlI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,YAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BtC,gBAAgB,MAIpBxB,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BtC,gBAAgB,KAEpBxB,KAAKwC,UAAU4F,eAAe,YAC9BpI,KAAKkI,6DAKTlI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,aAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BpC,iBAAiB,MAIrB1B,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BpC,iBAAiB,KAErB1B,KAAKwC,UAAU4F,eAAe,aAC9BpI,KAAKkI,6DAKTlI,KAAKqH,oBACDrH,KAAKwC,UAAU2F,WAAW,aAC1BnI,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BnC,iBAAiB,MAIrB3B,KAAK6D,SAAS,SAACzD,EAAO0D,GAAR,MAAmB,CAC7BnC,iBAAiB,KAErB3B,KAAKwC,UAAU4F,eAAe,aAC9BpI,KAAKkI,sBA9mBEG,aAmnBJC,cAhoBA,SAAAC,GAAK,MAAK,CACrBrD,UAAW,CACPvF,MAAO,SAEXgH,WAAY,CACRxC,UAAW,SAEfM,UAAU,CACNN,UAAW,OACXqE,aAAc,UAunBPF,CAAmB1I,GCrpBnB6I,mLAVP,OACIrJ,EAAAC,EAAAC,cAACoJ,EAAA,SAAD,KACAtJ,EAAAC,EAAAC,cAACqJ,EAAD,MAEAvJ,EAAAC,EAAAC,cAACsJ,EAAD,cANMP,aCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/J,EAAAC,EAAAC,cAAC8J,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.5c8aa5b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography color=\"inherit\">\r\n                        React Application\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react'\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Input from '@material-ui/core/Input'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\n\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport * as moment from 'moment';\r\n\r\n//import * as contentful from 'contentful' //for http request\r\n\r\n//constant\r\nconst PRIORITY_LOW = 'LOW'\r\nconst PRIORITY_MEDIUM = 'MEDIUM'\r\nconst PRIORITY_HIGH = 'HIGH'\r\nconst PRIORITY_MANDATORY = 'MANDATORY'\r\n\r\nconst CR_ENHANCEMENT = 'ENHANCEMENT'\r\nconst CR_DEFECT = \"DEFECT\"\r\n\r\nconst styles = theme => ({\r\n    formLabel: {\r\n        color: 'black'\r\n    },\n    formSelect: {\n        marginTop: '.9rem',\r\n    },\r\n    formTitle:{\r\n        marginTop: '1rem',\r\n        marginBottom: '1rem'\r\n    }\r\n})\r\n\r\nclass Form extends Component{\r\n    state = {\r\n        //cr data\r\n        cr_number : '',\r\n        cr_type : '',\r\n        request_type : '',\r\n\r\n        description : '',\r\n        reason : '',\r\n\r\n        date_required : new Date().toISOString().substring(0, 10),\r\n        priority : '',\r\n\r\n        request_date : new Date().toISOString().substring(0, 10),\r\n        requester : '',\r\n        signature : false,\r\n\r\n        //error handling\r\n        error_cr_number : false, //no validation\r\n        error_cr_type : false, //no validation\r\n        error_request_type : false, //required\r\n\r\n        error_description : false, //required\r\n        error_reason : false, //required\r\n\r\n        error_date_required : false, //required, date\r\n        error_priority : false, //required\r\n\r\n        error_request_date : false, //no validation\r\n        error_requester : false, //required\r\n        error_signature : false, //required\r\n\r\n        //temp change request number\r\n        id: 123,\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        //const value = target.value;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\n        console.log(target.name);\r\n        console.log(target.value);\r\n\r\n        if(name === 'signature'){\r\n            this.setState((state, props) => ({\r\n                'signature': !this.state.signature\r\n            }));\r\n        }\n        this.setState((state, props) => ({\r\n            [name]: value\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props //get injected jss\r\n        return (\r\n            <Container style={{marginTop: '1rem'}}>\r\n            <Grid container justify=\"center\">\r\n                <Typography variant='h4' classes={{root: classes.formTitle}}>Change Request Form</Typography>\r\n            </Grid>\r\n            <form action=\"#\">\r\n            <Grid container direction='column' spacing={2}>\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='cr_number' required classes={{root: classes.formLabel}} >CR Number</InputLabel>\r\n                    <TextField\r\n                        disabled\r\n                        id='cr_number'\r\n                        name=\"cr_number\"\r\n                        placeholder=\"CR000001\"\r\n                        value={this.state.cr_number}\r\n                        onChange={this.handleChange}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        required\r\n                        />\r\n\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='cr_type' required classes={{root: classes.formLabel}}>Type of CR</InputLabel>\r\n                    <FormControl fullWidth>\r\n\r\n                    <RadioGroup\r\n                        aria-label=\"cr_type\"\r\n                        name=\"cr_type\"\r\n                        value={this.state.cr_type}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                    <Grid container>\r\n                        <Grid item sm={6} xs={12}>\r\n                            <FormControlLabel value={CR_ENHANCEMENT} control={<Radio />} label=\"Enhancement\" />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12}>\r\n                            <FormControlLabel value={CR_DEFECT} control={<Radio />} label=\"Defect\" />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='request_type' required classes={{root: classes.formLabel}} >Project/System/Initiative</InputLabel>\r\n                    <TextField\r\n                        id='request_type'\r\n                        name=\"request_type\"\r\n                        placeholder=\"\"\r\n                        value={this.state.request_type}\r\n                        onChange={this.handleChange}\r\n                        onBlur={this.requestTypeValidation}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        required\r\n                        error={this.state.error_request_type}\r\n                        />\r\n                    {this.state.error_request_type ?\r\n                        <FormHelperText error>\r\n                        {\r\n                            this.validator.message(\r\n                                'request_type',\r\n                                this.state.request_type,\r\n                                'required',{\r\n                                    messages: {\r\n                                        required: 'Project/System/Initiative is required'\r\n                                    }\r\n                                }\r\n                            )\r\n                        }\r\n                        </FormHelperText> : ''}\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='description' required classes={{root: classes.formLabel}} >Description of Request</InputLabel>\r\n                    <TextField\r\n                        id='description'\r\n                        name=\"description\"\r\n                        placeholder=\"\"\r\n                        value={this.state.description}\r\n                        onChange={this.handleChange}\r\n                        onBlur={this.descriptionValidation}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        multiline\r\n                        rows=\"4\"\r\n                        required\r\n                        error={this.state.error_description}\r\n                        />\r\n                        {this.state.error_description ?\r\n                            <FormHelperText error>\r\n                            {\r\n                                this.validator.message(\r\n                                    'description',\r\n                                    this.state.description,\r\n                                    'required'\r\n                                )\r\n                            }\r\n                            </FormHelperText> : ''}\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='reason' required classes={{root: classes.formLabel}} >Reason for Change</InputLabel>\r\n                    <TextField\r\n                        id='reason'\r\n                        name=\"reason\"\r\n                        placeholder=\"Eg:Legal Requirement, PDPA, etc.\"\r\n                        value={this.state.reason}\r\n                        onChange={this.handleChange}\r\n                        onBlur={this.reasonValidation}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        required\r\n                        error={this.state.error_reason}\r\n                        />\r\n                        {this.state.error_reason ?\r\n                            <FormHelperText error>\r\n                            {\r\n                                this.validator.message(\r\n                                    'reason',\r\n                                    this.state.reason,\r\n                                    'required'\r\n                                )\r\n                            }\r\n                            </FormHelperText> : ''}\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='date_required' required classes={{root: classes.formLabel}} >Date Required</InputLabel>\r\n                    <TextField\r\n                        id='date_required'\r\n                        name=\"date_required\"\r\n                        placeholder=\"CR000001\"\r\n                        value={this.state.date_required}\r\n                        onChange={this.handleChange}\r\n                        onBlur={this.dateRequiredValidation}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        type=\"date\"\r\n                        required\r\n                        error={this.state.error_date_required}\r\n                        />\r\n                        {this.state.error_date_required ?\r\n                            <FormHelperText error>\r\n                            {\r\n                                this.validator.message(\r\n                                    'date_required',\r\n                                    this.state.date_required,\r\n                                    'required|date_format'\r\n                                )\r\n                            }\r\n                            </FormHelperText> : ''}\r\n                    </Grid>\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='priority' required classes={{root: classes.formLabel}} >Priority</InputLabel>\r\n                    <Select\r\n                        name='priority'\r\n                        displayEmpty\r\n                        value={this.state.priority}\r\n                        onChange={this.handleChange}\r\n                        input={<OutlinedInput error={this.state.error_priority} classes={{root: classes.formSelect}}/>}\r\n                        fullWidth\r\n                        onBlur={this.priorityValidation}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>Choose your priority</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={PRIORITY_LOW}>Low</MenuItem>\r\n                        <MenuItem value={PRIORITY_MEDIUM}>Medium</MenuItem>\r\n                        <MenuItem value={PRIORITY_HIGH}>High</MenuItem>\r\n                        <MenuItem value={PRIORITY_MANDATORY}>Mandatory</MenuItem>\r\n                    </Select>\r\n                    {this.state.error_priority ?\r\n                        <FormHelperText error>\r\n                        {\r\n                            this.validator.message(\r\n                                'priority',\r\n                                this.state.priority,\r\n                                'required'\r\n                            )\r\n                        }\r\n                        </FormHelperText> : ''}\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='request_date' classes={{root: classes.formLabel}} >Request Date</InputLabel>\r\n                    <TextField\r\n                        id='request_date'\r\n                        name=\"request_date\"\r\n                        placeholder=\"CR000001\"\r\n                        value={this.state.request_date}\r\n                        onChange={this.handleChange}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        type=\"date\"\r\n                        disabled\r\n                        required\r\n                        />\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                    <InputLabel htmlFor='requester' required classes={{root: classes.formLabel}} >Requester Name</InputLabel>\r\n                    <TextField\r\n                        id='requester'\r\n                        name=\"requester\"\r\n                        placeholder=\"\"\r\n                        value={this.state.requester}\r\n                        onChange={this.handleChange}\r\n                        margin='normal'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        onBlur={this.requesterValidation}\r\n                        required\r\n                        error={this.state.error_requester}\r\n                        />\r\n                        {this.state.error_requester ?\r\n                            <FormHelperText error>\r\n                            {\r\n                                this.validator.message(\r\n                                    'requester',\r\n                                    this.state.requester,\r\n                                    'required'\r\n                                )\r\n                            }\r\n                            </FormHelperText> : ''}\r\n                </Grid>\r\n\r\n                <Grid item xs>\r\n                <Grid container spacing={2}>\r\n                    <Grid item sm={10} xs={12}>\r\n                        <FormControl fullWidth={true}>\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox id='signature' name='signature'></Checkbox>}\r\n                                    label=\"I agree to Segment&#39;s Terms and Privacy Policy\"\r\n                                    labelPlacement=\"end\"\r\n                                    checked={this.state.signature}\r\n                                    onChange={this.handleChange}\r\n                                    onBlur={this.signatureValidation}\r\n                                />\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                        {this.state.error_signature ?\r\n                            <FormHelperText error>\r\n                            {\r\n                                this.validator.message(\r\n                                    'signature',\r\n                                    this.state.signature,\r\n                                    'boolean_true',{\r\n                                        messages: {\r\n                                            boolean_true: 'You must agree to the terms and privacy policy to proceed'\r\n                                        }\r\n                                    }\r\n                                )\r\n                            }\r\n                            </FormHelperText> : ''}\r\n                    </Grid>\r\n                    <Grid item sm={2} xs={12} justify=\"center\" container>\r\n                        <Button onClick={this.submit}  variant=\"contained\" color=\"primary\"\r\n                            //type='submit' //submit buggy\r\n                        >Submit</Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n            </form>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    constructor(){\r\n        super()\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.submit = this.submit.bind(this)\r\n\r\n        //validator\r\n        this.requestTypeValidation = this.requestTypeValidation.bind(this)\r\n        this.descriptionValidation = this.descriptionValidation.bind(this)\r\n        this.reasonValidation = this.reasonValidation.bind(this)\r\n        this.dateRequiredValidation = this.dateRequiredValidation.bind(this)\r\n        this.priorityValidation = this.priorityValidation.bind(this)\r\n        this.requesterValidation = this.requesterValidation.bind(this)\r\n        this.signatureValidation = this.signatureValidation.bind(this)\r\n        this.validator = new SimpleReactValidator({\r\n            element: false,\r\n            validators: {\r\n                date_format: {  // name the rule\r\n                    message: 'The :attribute must be a date.',\r\n                    rule: (val, params, validator) => {\r\n                        return moment(val).isValid()\r\n                    },\r\n                    //required: true  // optional\r\n                },\r\n                boolean_true: {\r\n                    message: 'The :attribute must be a boolean with true value',\r\n                    rule: (val, params, validator) => {\r\n                        return val === true\r\n                    },\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initForm()\r\n    }\r\n\r\n    initForm() {\r\n        //predefined content\r\n        if(this.state.id >= 0){\r\n            this.setState((state, props) => ({\r\n                cr_number: 'CR' + this.getCRNumber(this.state.id)\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                cr_number: 'CR000000'\r\n            }))\r\n        }\r\n        this.setState((state, props) => ({\r\n            cr_type: CR_ENHANCEMENT\r\n        }))\r\n        this.refreshValidation()\r\n\r\n        //content initialisation\r\n    }\r\n\r\n    getCRNumber(id){\r\n        if(id.toString().length < 6){\r\n            return ('000000' + this.state.id.toString()).slice(-6)\r\n        }\r\n        return id.toString()\r\n    }\r\n\r\n    clearInput() {\r\n        return new Promise(resolve => this.setState((state, props) => ({\r\n            //cr_number : '',\r\n            cr_type : CR_ENHANCEMENT,\r\n            request_type : '',\r\n\r\n            description : '',\r\n            reason : '',\r\n\r\n            date_required : new Date().toISOString().substring(0, 10),\r\n            priority : '',\r\n\r\n            request_date : new Date().toISOString().substring(0, 10),\r\n            requester : '',\r\n            signature: false,\r\n\r\n            error_cr_number : false, //no validation\r\n            error_cr_type : false, //no validation\r\n            error_request_type : false, //required\r\n\r\n            error_description : false, //required\r\n            error_reason : false, //required\r\n\r\n            error_date_required : false, //required, date\r\n            error_priority : false, //required\r\n\r\n            error_request_date : false, //no validation\r\n            error_requester : false, //required\r\n            error_signature : false, //required\r\n        }), resolve))\r\n    }\r\n\r\n    refreshValidation(){\r\n        this.validator.message(\r\n            'request_type',\r\n            this.state.request_type,\r\n            'required'\r\n        )\r\n\r\n        this.validator.message(\r\n            'description',\r\n            this.state.description,\r\n            'required'\r\n        )\r\n\r\n        this.validator.message(\r\n            'reason',\r\n            this.state.reason,\r\n            'required'\r\n        )\r\n\r\n        this.validator.message(\r\n            'date_required',\r\n            this.state.date_required,\r\n            'required|date_format'\r\n        )\r\n\r\n        this.validator.message(\r\n            'priority',\r\n            this.state.priority,\r\n            'required'\r\n        )\r\n\r\n        this.validator.message(\r\n            'requester',\r\n            this.state.requester,\r\n            'required'\r\n        )\r\n\r\n        this.validator.message(\r\n            'signature',\r\n            this.state.signature,\r\n            'boolean_true'\r\n        )\r\n    }\r\n\r\n    submit() {\r\n        //ISSUE:: allValid() not trigger is buggy\r\n        if (this.validator.allValid() && this.isValidatorValid()) {\r\n            this.clearInput().then(resolve => {\r\n                return new Promise(resolve => this.setState({\r\n                    //increment cr number\r\n                    id: this.state.id + 1,\r\n                    }, resolve))\r\n                }).then(resolve => {\r\n                    //initialise form\r\n                    this.initForm()\r\n                    alert('The change request is sent successfully.')\r\n                    this.forceUpdate();\r\n                })\r\n        }\r\n        else{\r\n            this.requestTypeValidation();\r\n            this.descriptionValidation();\r\n            this.reasonValidation();\r\n            this.dateRequiredValidation();\r\n            this.priorityValidation();\r\n            this.requesterValidation();\r\n            this.signatureValidation();\r\n        }\r\n    }\r\n\r\n    isValidatorValid(){\r\n        return this.validator.fieldValid('request_type') &&\r\n                this.validator.fieldValid('description') &&\r\n                this.validator.fieldValid('reason') &&\r\n                this.validator.fieldValid('date_required') &&\r\n                this.validator.fieldValid('priority') &&\r\n                this.validator.fieldValid('requester') &&\r\n                this.validator.fieldValid('signature')\r\n    }\r\n\r\n    requestTypeValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('request_type')) {\r\n            this.setState((state, props) => ({\r\n                error_request_type: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_request_type: true,\r\n            }))\r\n            this.validator.showMessageFor('request_type')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    descriptionValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('description')) {\r\n            this.setState((state, props) => ({\r\n                error_description: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_description: true,\r\n            }))\r\n            this.validator.showMessageFor('description')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    reasonValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('reason')) {\r\n            this.setState((state, props) => ({\r\n                error_reason: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_reason: true,\r\n            }))\r\n            this.validator.showMessageFor('reason')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    dateRequiredValidation(){\r\n        this.refreshValidation()\r\n        this.validator.fieldValid('date_required')\r\n        if (this.validator.fieldValid('date_required')) {\r\n            this.setState((state, props) => ({\r\n                error_date_required: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_date_required: true,\r\n            }))\r\n            this.validator.showMessageFor('date_required')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    priorityValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('priority')) {\r\n            this.setState((state, props) => ({\r\n                error_priority: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_priority: true,\r\n            }))\r\n            this.validator.showMessageFor('priority')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    requesterValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('requester')) {\r\n            this.setState((state, props) => ({\r\n                error_requester: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_requester: true,\r\n            }))\r\n            this.validator.showMessageFor('requester')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    signatureValidation(){\r\n        this.refreshValidation()\r\n        if (this.validator.fieldValid('signature')) {\r\n            this.setState((state, props) => ({\r\n                error_signature: false,\r\n            }))\r\n        }\r\n        else{\r\n            this.setState((state, props) => ({\r\n                error_signature: true,\r\n            }))\r\n            this.validator.showMessageFor('signature')\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Form)\r\n","import React, {Component, Fragment} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport NavBar from './components/NavBar.js'\nimport Content from './components/Form.js'\n\nclass App extends Component{\n    render() {\n        return (\n            <Fragment>\n            <NavBar/>\n\n            <Content/>\n            </Fragment> //need enclosing tag\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}